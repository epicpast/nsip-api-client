name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate version format
      run: |
        VERSION="${{ github.event.inputs.version }}"
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi

    - name: Check if tag exists
      run: |
        if git rev-parse "v${{ github.event.inputs.version }}" >/dev/null 2>&1; then
          echo "Tag v${{ github.event.inputs.version }} already exists!"
          exit 1
        fi

  test:
    name: Run Tests
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests
      run: |
        pytest --cov=nsip_client --cov-report=term-missing -v

  quality:
    name: Quality Checks
    needs: validate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run quality checks
      run: |
        black --check src/ tests/ examples/
        isort --check-only src/ tests/ examples/
        flake8 src/ tests/
        mypy src/ --ignore-missing-imports

  build:
    name: Build and Release
    needs: [test, quality]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v${{ github.event.inputs.version }}" -m "Release version ${{ github.event.inputs.version }}"
        git push origin "v${{ github.event.inputs.version }}"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body: |
          Release version ${{ github.event.inputs.version }}

          ## Installation

          ```bash
          # Install from wheel
          pip install https://github.com/epicpast/nsip-api-client/releases/download/v${{ github.event.inputs.version }}/nsip_client-${{ github.event.inputs.version }}-py3-none-any.whl

          # Or from source
          pip install https://github.com/epicpast/nsip-api-client/releases/download/v${{ github.event.inputs.version }}/nsip-client-${{ github.event.inputs.version }}.tar.gz
          ```

          See [CHANGELOG.md](CHANGELOG.md) for details.
        files: |
          dist/*.tar.gz
          dist/*.whl
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-v${{ github.event.inputs.version }}
        path: dist/
        retention-days: 90
