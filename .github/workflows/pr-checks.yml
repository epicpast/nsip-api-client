name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-checks:
    name: PR Quality Gate
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better diffs

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run all quality checks
      run: |
        echo "::group::Black formatting"
        black --check src/ tests/ examples/ || (echo "❌ Black formatting failed" && exit 1)
        echo "::endgroup::"

        echo "::group::isort import sorting"
        isort --check-only src/ tests/ examples/ || (echo "❌ isort failed" && exit 1)
        echo "::endgroup::"

        echo "::group::flake8 linting"
        flake8 src/ tests/ || (echo "❌ flake8 failed" && exit 1)
        echo "::endgroup::"

        echo "::group::mypy type checking"
        mypy src/ --ignore-missing-imports || (echo "❌ mypy failed" && exit 1)
        echo "::endgroup::"

    - name: Run tests with coverage
      run: |
        pytest --cov=nsip_client --cov-report=term-missing --cov-fail-under=80 -v

    - name: Check for new TODO/FIXME comments
      run: |
        git diff origin/main...HEAD | grep -E "^\+.*TODO|^\+.*FIXME" || true

    - name: Validate package can be built
      run: |
        pip install build
        python -m build

    - name: Comment PR with results
      if: always()
      uses: actions/github-script@v8
      with:
        script: |
          const output = `#### Quality Checks ${{ job.status == 'success' && '✅' || '❌' }}

          **Status**: ${{ job.status }}

          - Format Check: ${{ steps.format.outcome || 'Passed' }}
          - Linting: ${{ steps.lint.outcome || 'Passed' }}
          - Type Check: ${{ steps.typecheck.outcome || 'Passed' }}
          - Tests: ${{ steps.test.outcome || 'Passed' }}

          *Automated checks completed*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });
